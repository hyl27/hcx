# -*- coding: utf-8 -*-
import requests
import json
from langchain.llms.base import LLM
from pydantic import Field


class CompletionExecutor(LLM):
    host: str = Field(None)
    api_key: str = Field(None)
    api_key_primary_val: str = Field(None)
    request_id: str = Field(None)
    headers: dict = Field(None)
    request_data: dict = Field(None)
    system: str = Field(None)
    user: str = Field(None)

    def __init__(self):
        super(CompletionExecutor, self).__init__()
        self.host = ""
        self.api_key = ""
        self.api_key_primary_val = ""
        self.request_id = ""

        self.headers = {
            "X-NCP-CLOVASTUDIO-API-KEY": self.api_key,
            "X-NCP-APIGW-API-KEY": self.api_key_primary_val,
            "X-NCP-CLOVASTUDIO-REQUEST-ID": self.request_id,
            "Content-Type": "application/json; charset=utf-8",
        }

    @property
    def _llm_type(self) -> str:
        return "clova"

    def _call(self, prompt: str, **kwargs):
        """
        Args:
            prompt: The prompt to pass into the model.
            stop: A list of strings to stop generation when encountered

        Returns:
            The string generated by the model
        """

        resposne = self.invoke(prompt)
        return resposne

    def invoke(self, system, *args):
        self.system = system
        message = system.to_messages()
        # print(message)
        self.request_data = {
            "messages": [
                {"role": "system", "content": message[0].content},
                {"role": "user", "content": message[1].content},
            ],
            "topP": 0.8,
            "topK": 0,
            "maxTokens": 500,
            "temperature": 0.5,
            "repeatPenalty": 5.0,
            "stopBefore": [],
            "includeAiFilters": True,
            "seed": 0,
        }
        # print(self.request_data)
        with requests.post(
            self.host + "/testapp/v1/chat-completions/HCX-003",
            headers=self.headers,
            json=self.request_data,
            stream=True,
        ) as r:
            for line in r.iter_lines():
                if line:
                    content = line.decode("utf-8")
                    result = json.loads(content)
                    answer = result["result"]["message"]["content"]
                    return answer
